// Autogenerated from Pigeon (v1.0.12), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class ClientConfiguration {
  String? authorizationEndpoint;
  String? tokenEndpoint;
  String? clientId;
  String? clientSecret;
  String? redirectUri;
  List<String?>? scopes;
  String? state;
  String? codeVerifier;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['authorizationEndpoint'] = authorizationEndpoint;
    pigeonMap['tokenEndpoint'] = tokenEndpoint;
    pigeonMap['clientId'] = clientId;
    pigeonMap['clientSecret'] = clientSecret;
    pigeonMap['redirectUri'] = redirectUri;
    pigeonMap['scopes'] = scopes;
    pigeonMap['state'] = state;
    pigeonMap['codeVerifier'] = codeVerifier;
    return pigeonMap;
  }

  static ClientConfiguration decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ClientConfiguration()
      ..authorizationEndpoint = pigeonMap['authorizationEndpoint'] as String?
      ..tokenEndpoint = pigeonMap['tokenEndpoint'] as String?
      ..clientId = pigeonMap['clientId'] as String?
      ..clientSecret = pigeonMap['clientSecret'] as String?
      ..redirectUri = pigeonMap['redirectUri'] as String?
      ..scopes = (pigeonMap['scopes'] as List<Object?>?)?.cast<String?>()
      ..state = pigeonMap['state'] as String?
      ..codeVerifier = pigeonMap['codeVerifier'] as String?;
  }
}

class _NativeLoginCodec extends StandardMessageCodec {
  const _NativeLoginCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ClientConfiguration) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return ClientConfiguration.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class NativeLogin {
  /// Constructor for [NativeLogin].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NativeLogin({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _NativeLoginCodec();

  Future<Map<String?, String?>> login(ClientConfiguration arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeLogin.login', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_config]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as Map<Object?, Object?>?)!
          .cast<String?, String?>();
    }
  }
}
