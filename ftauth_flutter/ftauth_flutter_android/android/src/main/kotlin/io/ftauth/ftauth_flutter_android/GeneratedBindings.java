// Autogenerated from Pigeon (v1.0.12), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.ftauth.ftauth_flutter_android;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class GeneratedBindings {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ClientConfiguration {
    private String authorizationEndpoint;
    public String getAuthorizationEndpoint() { return authorizationEndpoint; }
    public void setAuthorizationEndpoint(String setterArg) { this.authorizationEndpoint = setterArg; }

    private String tokenEndpoint;
    public String getTokenEndpoint() { return tokenEndpoint; }
    public void setTokenEndpoint(String setterArg) { this.tokenEndpoint = setterArg; }

    private String clientId;
    public String getClientId() { return clientId; }
    public void setClientId(String setterArg) { this.clientId = setterArg; }

    private String clientSecret;
    public String getClientSecret() { return clientSecret; }
    public void setClientSecret(String setterArg) { this.clientSecret = setterArg; }

    private String redirectUri;
    public String getRedirectUri() { return redirectUri; }
    public void setRedirectUri(String setterArg) { this.redirectUri = setterArg; }

    private List<String> scopes;
    public List<String> getScopes() { return scopes; }
    public void setScopes(List<String> setterArg) { this.scopes = setterArg; }

    private String state;
    public String getState() { return state; }
    public void setState(String setterArg) { this.state = setterArg; }

    private String codeVerifier;
    public String getCodeVerifier() { return codeVerifier; }
    public void setCodeVerifier(String setterArg) { this.codeVerifier = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("authorizationEndpoint", authorizationEndpoint);
      toMapResult.put("tokenEndpoint", tokenEndpoint);
      toMapResult.put("clientId", clientId);
      toMapResult.put("clientSecret", clientSecret);
      toMapResult.put("redirectUri", redirectUri);
      toMapResult.put("scopes", scopes);
      toMapResult.put("state", state);
      toMapResult.put("codeVerifier", codeVerifier);
      return toMapResult;
    }
    static ClientConfiguration fromMap(Map<String, Object> map) {
      ClientConfiguration fromMapResult = new ClientConfiguration();
      Object authorizationEndpoint = map.get("authorizationEndpoint");
      fromMapResult.authorizationEndpoint = (String)authorizationEndpoint;
      Object tokenEndpoint = map.get("tokenEndpoint");
      fromMapResult.tokenEndpoint = (String)tokenEndpoint;
      Object clientId = map.get("clientId");
      fromMapResult.clientId = (String)clientId;
      Object clientSecret = map.get("clientSecret");
      fromMapResult.clientSecret = (String)clientSecret;
      Object redirectUri = map.get("redirectUri");
      fromMapResult.redirectUri = (String)redirectUri;
      Object scopes = map.get("scopes");
      fromMapResult.scopes = (List<String>)scopes;
      Object state = map.get("state");
      fromMapResult.state = (String)state;
      Object codeVerifier = map.get("codeVerifier");
      fromMapResult.codeVerifier = (String)codeVerifier;
      return fromMapResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class NativeLoginCodec extends StandardMessageCodec {
    public static final NativeLoginCodec INSTANCE = new NativeLoginCodec();
    private NativeLoginCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ClientConfiguration.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ClientConfiguration) {
        stream.write(128);
        writeValue(stream, ((ClientConfiguration) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface NativeLogin {
    void login(ClientConfiguration config, Result<Map<String, String>> result);

    /** The codec used by NativeLogin. */
    static MessageCodec<Object> getCodec() {
      return NativeLoginCodec.INSTANCE;
    }

    /** Sets up an instance of `NativeLogin` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, NativeLogin api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeLogin.login", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ClientConfiguration configArg = (ClientConfiguration)args.get(0);
              if (configArg == null) {
                throw new NullPointerException("configArg unexpectedly null.");
              }
              Result<Map<String, String>> resultCallback = new Result<Map<String, String>>() {
                public void success(Map<String, String> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.login(configArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
