// Autogenerated from Pigeon (v1.0.12), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "GeneratedBindings.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}


@interface FTAuthNativeStorageCodecReader : FlutterStandardReader
@end
@implementation FTAuthNativeStorageCodecReader
@end

@interface FTAuthNativeStorageCodecWriter : FlutterStandardWriter
@end
@implementation FTAuthNativeStorageCodecWriter
@end

@interface FTAuthNativeStorageCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FTAuthNativeStorageCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FTAuthNativeStorageCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FTAuthNativeStorageCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FTAuthNativeStorageGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    FTAuthNativeStorageCodecReaderWriter *readerWriter = [[FTAuthNativeStorageCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void FTAuthNativeStorageSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FTAuthNativeStorage> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NativeStorage.clear"
        binaryMessenger:binaryMessenger
        codec:FTAuthNativeStorageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearWithError:)], @"FTAuthNativeStorage api (%@) doesn't respond to @selector(clearWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api clearWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NativeStorage.delete"
        binaryMessenger:binaryMessenger
        codec:FTAuthNativeStorageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(deleteKey:error:)], @"FTAuthNativeStorage api (%@) doesn't respond to @selector(deleteKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_key = args[0];
        FlutterError *error;
        [api deleteKey:arg_key error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NativeStorage.getString"
        binaryMessenger:binaryMessenger
        codec:FTAuthNativeStorageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getStringKey:error:)], @"FTAuthNativeStorage api (%@) doesn't respond to @selector(getStringKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_key = args[0];
        FlutterError *error;
        NSString *output = [api getStringKey:arg_key error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NativeStorage.init"
        binaryMessenger:binaryMessenger
        codec:FTAuthNativeStorageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initWithError:)], @"FTAuthNativeStorage api (%@) doesn't respond to @selector(initWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api initWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NativeStorage.setString"
        binaryMessenger:binaryMessenger
        codec:FTAuthNativeStorageGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setStringKey:value:error:)], @"FTAuthNativeStorage api (%@) doesn't respond to @selector(setStringKey:value:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_key = args[0];
        NSString *arg_value = args[1];
        FlutterError *error;
        [api setStringKey:arg_key value:arg_value error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
